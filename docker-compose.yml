version: '3'

services:
  producer:
    build:
      dockerfile: ./producer/Dockerfile
    container_name: producer
    environment:
      SCHEMA_REGISTRY_URL: "${SCHEMA_REGISTRY_URL}"
      SCHEMA_SUBJECT_NAME: "${SCHEMA_SUBJECT_NAME}"
      KAFKA_URL: "kafka-0:9092,kafka-1:9092"
      TOPIC_KAFKA: ${KAFKA_TOPIC}
      FINHUB_SYMBOLS: "${FINHUB_SYMBOLS}"
      FINHUB_SECRET_KEY: ${FINHUB_SECRET_KEY}
      FINHUB_API_URL: "${FINHUB_API_URL}"
      FINHUB_TRACE: false
      FIRST_RUN: false
    depends_on:
      - kafka-0
      - kafka-1
      - schema-registry

  kafka-0:
    image: docker.io/bitnami/kafka:${BITNAMI_KAFKA_VERSION}
    hostname: kafka-0
    container_name: kafka-0
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - 'kafka0_data:/bitnami/kafka'
      - ./kafka/init-kafka.sh:/init-kafka.sh

  kafka-1:
    image: docker.io/bitnami/kafka:${BITNAMI_KAFKA_VERSION}
    hostname: kafka-1
    container_name: kafka-1
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - 'kafka1_data:/bitnami/kafka'

  schema-registry:
    image: docker.io/bitnami/schema-registry:${SCHEMA_REGISTRY_VERSION}
    container_name: schema-registry
    hostname: schema-registry
    ports:
      - '8081:8081'
    depends_on:
      - kafka-0
      - kafka-1
    environment:
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
      - SCHEMA_REGISTRY_KAFKA_BROKERS=PLAINTEXT://kafka-0:9092,PLAINTEXT://kafka-1:9092
  
  spark-master:
    container_name: spark-master
    image: cluster-apache-spark:${SPARK_VERSION}
    ports:
      - "9090:8080"
      - "7077:7077"
    volumes:
      - ./spark/data:/opt/spark-data
      - ./spark/target/scala-2.12/sparkjob-assembly-1.0-SNAPSHOT.jar:/opt/spark-apps/app.jar
    environment:
      - SPARK_LOCAL_IP=spark-master
      - SPARK_WORKLOAD=master
      - SPARK_MASTER=spark://spark-master:7077
      - KAFKA_BOOTSTRAP_SERVERS=kafka-0:9092,kafka-1:9092
      - SCHEMA_REGISTRY_URL=${SCHEMA_REGISTRY_URL}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - CASSANDRA_HOST=cassandra
      - CASSANDRA_KEYSPACE=market
      - CASSANDRA_TRADE_TABLE=trades
      - CASSANDRA_SUMMARY_TABLE=running_averages_15_sec
    depends_on:
      - kafka-0
      - kafka-1
      - schema-registry
      - cassandra
  spark-worker-0:
    container_name: spark-worker-0
    image: cluster-apache-spark:${SPARK_VERSION}
    ports:
      - "9091:8080"
      - "7000:7000"
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1G
      - SPARK_DRIVER_MEMORY=1G
      - SPARK_EXECUTOR_MEMORY=1G
      - SPARK_WORKLOAD=worker
      - SPARK_LOCAL_IP=spark-worker-0
      - KAFKA_BOOTSTRAP_SERVERS=kafka-0:9092,kafka-1:9092
      - SCHEMA_REGISTRY_URL=${SCHEMA_REGISTRY_URL}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - CASSANDRA_HOST=cassandra
      - CASSANDRA_KEYSPACE=${CASSANDRA_KEYSPACE}
      - CASSANDRA_TRADE_TABLE=${CASSANDRA_TRADE_TABLE}
      - CASSANDRA_SUMMARY_TABLE=${CASSANDRA_SUMMARY_TABLE}
    volumes:
      - ./spark/apps:/opt/spark-apps
      - ./spark/data:/opt/spark-data

  cassandra:
    container_name: cassandra
    hostname: cassandra
    image: cassandra:5.0.2
    volumes:
      - ./cassandra/cassandra-setup.cql:/cassandra-setup.cql
      - ./cassandra/init-cassandra.sh:/init-cassandra.sh
    expose:
      - 9042

  grafana:
    container_name: grafana
    build:
      dockerfile: ./grafana/Dockerfile
    ports:
      - 3000:3000
    depends_on:
      - cassandra
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/datasources:/etc/grafana/datasources

volumes:
  kafka0_data:
  kafka1_data:
